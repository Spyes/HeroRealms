// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var SocketIo = require("socket.io");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Json$ReactTemplate = require("./Json.bs.js");

function Make() {
  var on = function (socket, func) {
    socket.on("message", (function (obj) {
            return Curry._1(func, Json$ReactTemplate.fromValidJson(obj));
          }));
    return /* () */0;
  };
  var emit = function (socket, obj) {
    socket.emit("message", Json$ReactTemplate.toValidJson(obj));
    return /* () */0;
  };
  var broadcast = function (socket, data) {
    socket.broadcast.emit("message", Json$ReactTemplate.toValidJson(data));
    return /* () */0;
  };
  var once = function (socket, func) {
    socket.once("message", (function (obj) {
            return Curry._1(func, Json$ReactTemplate.fromValidJson(obj));
          }));
    return /* () */0;
  };
  var volatileEmit = function (server, obj) {
    server.volatile.emit("message", Json$ReactTemplate.toValidJson(obj));
    return /* () */0;
  };
  var onDisconnect = function (socket, cb) {
    socket.on("disconnect", (function () {
            return Curry._1(cb, /* () */0);
          }));
    return /* () */0;
  };
  var onConnect = function (io, cb) {
    io.on("connection", cb);
    return /* () */0;
  };
  return [
          (function (prim) {
              return SocketIo(prim);
            }),
          (function (prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9, _) {
              var tmp = { };
              if (prim !== undefined) {
                tmp.pingTimeout = Js_primitive.valFromOption(prim);
              }
              if (prim$1 !== undefined) {
                tmp.pingInterval = Js_primitive.valFromOption(prim$1);
              }
              if (prim$2 !== undefined) {
                tmp.maxHttpBufferSize = Js_primitive.valFromOption(prim$2);
              }
              if (prim$3 !== undefined) {
                tmp.transports = Js_primitive.valFromOption(prim$3);
              }
              if (prim$4 !== undefined) {
                tmp.allowUpgrades = Js_primitive.valFromOption(prim$4);
              }
              if (prim$5 !== undefined) {
                tmp.perMessageDeflate = Js_primitive.valFromOption(prim$5);
              }
              if (prim$6 !== undefined) {
                tmp.httpCompression = Js_primitive.valFromOption(prim$6);
              }
              if (prim$7 !== undefined) {
                tmp.cookie = Js_primitive.valFromOption(prim$7);
              }
              if (prim$8 !== undefined) {
                tmp.cookiePath = Js_primitive.valFromOption(prim$8);
              }
              if (prim$9 !== undefined) {
                tmp.wsEngine = Js_primitive.valFromOption(prim$9);
              }
              return tmp;
            }),
          (function (prim, prim$1) {
              return SocketIo(prim, prim$1);
            }),
          (function () {
              return SocketIo();
            }),
          (function (prim) {
              return SocketIo(prim);
            }),
          (function (prim, prim$1) {
              return SocketIo(prim, prim$1);
            }),
          (function (prim, prim$1) {
              return prim.serveClient(prim$1);
            }),
          (function (prim, prim$1) {
              return prim.path(prim$1);
            }),
          (function (prim, prim$1) {
              return prim.adapter(prim$1);
            }),
          (function (prim, prim$1) {
              return prim.origins(prim$1);
            }),
          (function (prim, prim$1) {
              return prim.origins(prim$1);
            }),
          (function (prim) {
              prim.close();
              return /* () */0;
            }),
          (function (prim, prim$1, prim$2) {
              return prim.attach(prim$1, prim$2);
            }),
          (function (prim, prim$1, prim$2) {
              return prim.attach(prim$1, prim$2);
            }),
          [
            (function (prim) {
                return prim.id;
              }),
            (function (prim) {
                return prim.rooms;
              }),
            (function (prim) {
                return prim.handshake;
              }),
            on,
            emit,
            broadcast,
            (function (prim, prim$1) {
                return prim.join(prim$1);
              }),
            (function (prim, prim$1) {
                return prim.leave(prim$1);
              }),
            (function (prim, prim$1) {
                return prim.to(prim$1);
              }),
            (function (prim, prim$1) {
                return prim.compress(prim$1);
              }),
            (function (prim, prim$1) {
                return prim.disconnect(prim$1);
              }),
            (function (prim, prim$1) {
                prim.use(prim$1);
                return /* () */0;
              }),
            once,
            (function (prim) {
                return prim.volatile;
              }),
            volatileEmit,
            onDisconnect
          ],
          onConnect
        ];
}

exports.Make = Make;
/* socket.io Not a pure module */
